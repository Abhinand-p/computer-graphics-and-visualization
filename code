
1. Program to recursively subdivide a tetrahedron to form 3D Sierpinski gasket. The number of recursive steps is to be specified by the user. 

Objective:
 	 In this program, students will learn to create window and to draw 3D Sierpinski gasket using openGL  functions.

Program: 
#include <GL/glut.h>
#include <stdlib.h>
#include<stdio.h>
typedef   float  point[3];

point v[]={ {0.0,0.0,1.0},
      {0.0,0.943,-0.33},
      {-0.816,-0.471,-0.33},
      {0.816,-0.471,0.33}};

int n;
void triangle(point a,point b,point c)
{
	glBegin(GL_POLYGON);
	glNormal3fv(a);
	glVertex3fv(a);
	glVertex3fv(b);
	glVertex3fv(c);
	glEnd();
}

void divide_tri(point a,point b,point c,int m)
{
	point v1,v2,v3;
	int j;
	if (m>0)
	{
		for(j=0;j<3;j++)
			v1[j]=(a[j]+b[j])/2;

			for(j=0;j<3;j++)
			v2[j]=(a[j]+c[j])/2;

		for(j=0;j<3;j++)
			v3[j]=(b[j]+c[j])/2;

		divide_tri(a,v1,v2,m-1);

		divide_tri(c,v2,v3,m-1);

		divide_tri(b,v3,v1,m-1);
	}
else   
         	triangle(a,b,c);
}



void tetrahedron(int m)
{
	glColor3f(1.0,0.0,0.0);
	divide_tri(v[0],v[1],v[2],m);
	glColor3f(0.0,1.0,0.0);
	divide_tri(v[3],v[2],v[1],m);
	glColor3f(0.0,0.0,1.0);
	divide_tri(v[0],v[3],v[1],m);
	glColor3f(0.0,0.0,0.0);
	divide_tri(v[0],v[2],v[3],m);
}

void display(void)
{
	glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
    glLoadIdentity();
	tetrahedron(n);
	glFlush();
}


void  myReshape(int w,int h)
{
	glViewport(0,0,w,h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	if(w<=h)
		glOrtho(-2.0,2.0,-2.0*(GLfloat)h/(GLfloat)w,2.0*(GLfloat)h/(GLfloat)w,-10.0,10.0);
	else

         glOrtho(-2.0*(GLfloat)w/(GLfloat)h,2.0*(GLfloat)w/(GLfloat)h,-2.0,2.0,-10.0,10.0);
	glMatrixMode(GL_MODELVIEW);
	glutPostRedisplay();
}


int  main(int argc,char **argv)
{
	printf(“Enter the number of recursive steps you want\n”);
            scanf(“%d”, &n);
	glutInit(&argc,argv);
	glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB|GLUT_DEPTH);
	glutInitWindowSize(500,500);
	glutCreateWindow("3d gasket");
	glutReshapeFunc(myReshape);
	glutDisplayFunc(display);
	glEnable(GL_DEPTH_TEST);
	glClearColor(1.0,1.0,1.0,1.0);
	glutMainLoop();
}


2. Program to implement Liang-Barsky line clipping algorithm.
Objective : In this program the students will learn to implement Liang-Barsky Line Clipping Algorithm with Window to viewport Mapping with OPENGL API

Program 

#include <stdio.h>
#include <GL/glut.h>
#define true 1
#define false 0

double xmin=50,ymin=50, xmax=100,ymax=100; // Window boundaries
double xvmin=200,yvmin=200,xvmax=300,yvmax=300; // Viewport boundaries
//int x1, x2, y1, y2;

int cliptest(double p, double q, double *t1, double *t2)
{ 
  double t;
      if(p) t=q/p;  // to check whether p
  if(p < 0.0)    // potentially entry point, update te 
  {
	  if( t > *t1) *t1=t;
	  if( t > *t2) return(false); // line portion is outside
  }
  else
  if(p > 0.0)    //  Potentially leaving point, update tl
  { 
	  if( t < *t2) *t2=t;
	  if( t < *t1) return(false); // line portion is outside
  }
  else
	  if(p == 0.0)
	  {
		  if( q < 0.0) return(false); // line parallel to edge but outside
	  }
 return(true);
}

void LiangBarskyLineClipAndDraw (double x0, double y0,double x1, double y1)
{
	double dx=x1-x0, dy=y1-y0, te=0.0, tl=1.0;
	if(cliptest(-dx,x0-xmin,&te,&tl))  // inside test wrt left edge
	if(cliptest(dx,xmax-x0,&te,&tl)) // inside test wrt right edge
	if(cliptest(-dy,y0-ymin,&te,&tl)) // inside test wrt bottom edge
	if(cliptest(dy,ymax-y0,&te,&tl)) // inside test wrt top edge
	{
		if( tl < 1.0 )
		{
			x1 = x0 + tl*dx;
			y1 = y0 + tl*dy;
		}
		if( te > 0.0 ) 
		{   x0 = x0 + te*dx;
			y0 = y0 + te*dy;
		}
		
		                // Window to viewport mappings
		double sx=(xvmax-xvmin)/(xmax-xmin); // Scale parameters
		double sy=(yvmax-yvmin)/(ymax-ymin);
		double vx0=xvmin+(x0-xmin)*sx;
		double vy0=yvmin+(y0-ymin)*sy;
		double vx1=xvmin+(x1-xmin)*sx;
		double vy1=yvmin+(y1-ymin)*sy;
			//draw a red colored viewport
		glColor3f(1.0, 0.0, 0.0);
		glBegin(GL_LINE_LOOP);
			glVertex2f(xvmin, yvmin);
			glVertex2f(xvmax, yvmin);
			glVertex2f(xvmax, yvmax);
			glVertex2f(xvmin, yvmax);
		glEnd();
		glColor3f(0.0,0.0,1.0); // draw blue colored clipped line
		glBegin(GL_LINES);
			glVertex2d (vx0, vy0);
			glVertex2d (vx1, vy1);
		glEnd();
	}
	}// end of line clipping 
void display()
{
double x0=60,y0=20,x1=80,y1=120;
glClear(GL_COLOR_BUFFER_BIT);	
//draw the line with red color
glColor3f(1.0,0.0,0.0);
glBegin(GL_LINES);
	glVertex2d (x0, y0);
	glVertex2d (x1, y1);
glEnd();

//draw a blue colored window
glColor3f(0.0, 0.0, 1.0);

glBegin(GL_LINE_LOOP);
  glVertex2f(xmin, ymin);
  glVertex2f(xmax, ymin);
  glVertex2f(xmax, ymax);
  glVertex2f(xmin, ymax);
glEnd();
LiangBarskyLineClipAndDraw(x0,y0,x1,y1);
glFlush();
}
void myinit()
{
	glClearColor(1.0,1.0,1.0,1.0);
	glColor3f(1.0,0.0,0.0);
	glPointSize(1.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0.0,499.0,0.0,499.0);
}
int main(int argc, char** argv)
{
	//printf("Enter End points:");
	//scanf("%d%d%d%d", &x1,&x2,&y1,&y2);

	glutInit(&argc,argv);
	glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);
	glutInitWindowSize(500,500);
	glutInitWindowPosition(0,0);
	glutCreateWindow("Liang Barsky Line Clipping Algorithm");
	glutDisplayFunc(display);
	myinit();
	glutMainLoop();
}

3. Program to draw a color cube and spin it using openGL transformation matrices.

Objective : In this program the students will learn to draw a color cube and spin it using OpenGL functions.

#include <GL/glut.h>
#include <stdio.h>
#include <stdlib.h>

GLfloat    vertices[ ]={ -1.0,-1.0,-1.0,
         			   1.0,-1.0,-1.0,
               1.0, 1.0,-1.0,
            - 1.0, 1.0,-1.0,
    	            - 1.0,-1.0, 1.0,
               1.0,-1.0, 1.0,
               1.0, 1.0, 1.0,
              -1.0, 1.0, 1.0 };

GLfloat    normals[ ]={ -1.0,-1.0,-1.0,
                1.0,-1.0,-1.0,
                1.0, 1.0,-1.0,
               -1.0, 1.0,-1.0,
               -1.0,-1.0, 1.0,
                 1.0,-1.0, 1.0,
                 1.0, 1.0, 1.0,
                -1.0, 1.0, 1.0 };

GLfloat      colors[ ]={   0.0,0.0,0.0,
               1.0,0.0,0.0,
 	   1.0,1.0,0.0,
   0.0,1.0,0.0,
   0.0,0.0,1.0,
   1.0,0.0,1.0,
   1.0,1.0,1.0,
   0.0,1.0,1.0};
	
GLubyte cubeIndices[]={0,3,2,1,
     2,3,7,6,
     0,4,7,3,
     1,2,6,5,
     4,5,6,7,
     0,1,5,4 };

static GLfloat theta[]={0.0,0.0,0.0};
static GLint axis=2;

void display(void)
{
	glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
	glLoadIdentity();
	glRotatef(theta[0],1.0,0.0,0.0);
	glRotatef(theta[1],0.0,1.0,0.0);
	glRotatef(theta[2],0.0,0.0,1.0);
	glDrawElements(GL_QUADS,24,GL_UNSIGNED_BYTE,cubeIndices);
	glFlush();
	glutSwapBuffers();
}

void mouse(int btn,int state,int x,int y)
{
	if(btn==GLUT_LEFT_BUTTON && state==GLUT_DOWN)axis=0;
	if(btn==GLUT_RIGHT_BUTTON && state==GLUT_DOWN) axis=1;
	if(btn==GLUT_MIDDLE_BUTTON && state==GLUT_DOWN) axis=2;
}
 
 void spincube()
{
	theta[axis]+=2.0;
	if(theta[axis]>360.0)
		theta[axis]-=360.0;
	glutPostRedisplay();
}

void myReshape(int w,int h)
{
	glViewport(0,0,w,h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	if(w<=h)
	     glOrtho(-2.0,2.0,-2.0*(GLfloat)h/(GLfloat)w,2.0*(GLfloat)h/(GLfloat)w,10.0,10.0);
           else
	    glOrtho(-2.0*(GLfloat)w/(GLfloat)h,2.0*(GLfloat)w/(GLfloat)h,-2.0,2.0,-10.0,10.0);
	    glMatrixMode(GL_MODELVIEW);
}


int main(int argc,char **argv)
{
		glutInit(&argc,argv);
		glutInitDisplayMode(GLUT_DOUBLE|GLUT_RGB|GLUT_DEPTH);
		glutInitWindowSize(500,500);
		glutCreateWindow("color cuce");
		glutReshapeFunc(myReshape);
		glutDisplayFunc(display);
		glutMouseFunc(mouse);
           		 glutIdleFunc(spincube);
		glEnable(GL_DEPTH_TEST);
		glEnableClientState(GL_COLOR_ARRAY);
		glEnableClientState(GL_VERTEX_ARRAY);
		glEnableClientState(GL_NORMAL_ARRAY);
		glVertexPointer(3,GL_FLOAT,0,vertices);
		glColorPointer(3,GL_FLOAT,0,colors);
		glNormalPointer(GL_FLOAT,0,normals);
		glColor3f(1.0,1.0,1.0);
		glutMainLoop();
}
